#correct solution O(n) 
#monotonic queue 
'''valid element to queue of probable maxes when?
needs to be in current window (2)
needs to be larger than anything(any other element in the window) to its right (1)
step 1 is checked by poping the queue while nums[i]>q[-1] #### q[0] max AND q[-1] min of probable maxes

step 2
when window moved to the right if the most left element is still in the queue, it needs to be removed
when does this happen?
every element in the queue needs to be larger than anything at its right, so if the most left is still in it is the max => q[0]
'''
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        res = []
        q = deque()

        for idx, num in enumerate(nums):
            # Maintain the deque in descending order
            while q and q[-1] < num:
                q.pop()
            q.append(num)

            # Remove the elements which are out of this window
            if idx >= k and nums[idx - k] == q[0]:
                q.popleft() #we  remove the max==q[0] 
            
            # Append the maximum of the current window to the result
            if idx >= k - 1:
                res.append(q[0])
        
        return res
#my braindead original solution: O(n) still
'''
from collections import deque
def maxSlidingWindow(nums, k):
    if len(nums)<=1:return nums
    output=[]
    q = deque()
    #tefteri=set()
    blacklist={}
    for num in nums:
        blacklist[num]=[]
    #print(blacklist)
    #print(blacklist[9])
    for j in range(k):
        while len(q) > 0 and q[-1] < nums[j]:
            el=q.pop()
            blacklist[el].pop()
        q.append(nums[j])
        #ls=[j]
        blacklist[nums[j]].append(j)
    output.append(q[0])    
    #print(q)
    for i in range(1,len(nums)-k+1):#for element in array i=start
    #prosoxi me to 0
        if i-1 in blacklist[nums[i-1]]: 
            q.remove(nums[i-1])
            blacklist[nums[i-1]].remove(i-1)
        while len(q) > 0 and q[-1] < nums[i+k-1]:
            el=q.pop()
            blacklist[el].pop()
        q.append(nums[i+k-1])
        blacklist[nums[i+k-1]].append(i+k-1)
        output.append(q[0])
        #print(i)
        #print(q)
    return output

nums=[9,10,9,-7,-4,-8,2,-6]
k=5
print(maxSlidingWindow(nums, k))
'''
